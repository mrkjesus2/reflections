When would you want to use a remote repository rather than keeping all your work
local?

You would want to us a remote repository when you are sharing code to work on
with others, working from multiple computers, you have your work on a
development or production server, or you want to have a backup of the code that
you are working on.



Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

If you are collaborating with others, you would want to make sure that the work
they have done is acceptable, doesn't create conflicts, etc.



Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Forks are on the Github website only, they are for when you want to work on a
project and make your own changes without submitting them to the forked
repository.  Clones are when you make an identical copy of the repository on
your local machine either from github or your local machine.  Branches are in
the repository and allow you to separate code that you are working on until you
know it is ready to be merged.  You would use clone if you were collaborating on
a project with somebody and would use branches within that repository to add new
features.



What is the benefit of having a copy of the last known state of the remote
stored locally?

A benefit of have the remote copy stored locally is being able work on merges
offline.



How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

I would probably collaborate with email or dropbox if not for Git.  Email would
be much harder to keep track of files and structures.  Dropbox would be okay but
it would be harder to know what the versions of each file mean and there would
be a lot more time digging through code to see what was going on.



When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

I would want to make changes in a separate branch when collaborating with people so that the master branch is always the production(so to speack) branch. I would also want a separate branch if I was working with a large, complex code base, so that any errors I make won't have far reaching implications.  The advantage to working directly on the master branch is not having to deal with merge conflicts as much while the advantage to working on a branch is security and flexibility.